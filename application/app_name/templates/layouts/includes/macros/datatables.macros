{% set default_settings=dict(paging=False, searching=False, ordering=False) %}


{# --------------------------------------------------------------------- #}
{# If you create <table> and would like to datatable.js to populate them #}
{# based on json data, use this macro                                    #}
{# --------------------------------------------------------------------- #}
{% macro control(endpoint, id, data, settings={}, sample=None, custom_fields=[], two_fa_endpoint=None, create_order_endpoint=None, remove_supporter_endpoint=None, give_supporter_endpoint=None) %}
<script>
    function _copy_uuid(text) {
          var dummy = document.createElement(`textarea`);
          document.body.appendChild(dummy);
          dummy.value = text;
          dummy.select();
          document.execCommand(`copy`);
          document.body.removeChild(dummy);
    }

    $(document).ready(function() {
        let _table;

        let _header = $("#{{ id }} thead th");

        let _data = null;
        _data = {{ data }};

        const _action_column = (data, type, row) => {
            if (data.id) {
                return_data = ``
                {% if "copy_id" in custom_fields %}
                    return_data = return_data + `<a style="margin-right: 5%;" href='#' id='copy_tooltip__id_' data-placement="bottom" data-toggle="tooltip" data-trigger="manual" style="cursor:pointer;" title="ID Copied to Clipboard"><i title="Copy ID to Clipboard" class="fa fa-clone" onclick="_copy_uuid('_id_')"></i></a>`.replace(/_id_/g, data.id);
                {% endif %}
                {% if "manage2FA" in custom_fields %}
                    let two_fa_url = "{{ url_for(two_fa_endpoint + '.perform')}}?id=" + data.id;
                    return_data = return_data + `<a href="${two_fa_url}" title="Reset 2FA" style="margin-right: 5%;"><i class="fa-solid fa-key"></i></a>`
                {% endif %}
                {% if "createOrder" in custom_fields %}
                    let create_order_url = "{{ url_for(create_order_endpoint + '.index')}}?id=" + data.id;
                    return_data = return_data + `<a href="${create_order_url}" title="Create Order" style="margin-right: 5%;"><i class="fa-solid fa-money-check-dollar"></i></a>`
                {% endif %}

                {% if "give_supporter" in custom_fields %}
                    let give_supporter_url = "{{ url_for(give_supporter_endpoint + '.perform')}}?id=" + data.id;
                    return_data = return_data + `<a href="${give_supporter_url}" title="Give Supporter" style="margin-right: 5%;"><i class="fa-solid fa-gift"></i></a>`
                {% endif %}
                {% if "remove_supporter" in custom_fields %}
                    let remove_supporter_url = "{{ url_for(remove_supporter_endpoint + '.perform')}}?id=" + data.id;
                    return_data = return_data + `<a href="${remove_supporter_url}" title="Remove Supporter" style="margin-right: 5%;"><i class="fa-solid fa-circle-minus"></i></a>`
                {% endif %}

                {% if "readonly" not in custom_fields %}
                    let edit_url = "{{ url_for(endpoint + '.edit', id='_id_') }}".replace("_id_", data.id);
                    return_data = return_data + `<a href="${edit_url}" title="Edit" style="margin-right: 5%;"><i class="fa fa-edit"></i></a>`

                    {% if "editonly" not in custom_fields %}
                        let delete_url = "{{ url_for(endpoint + '.delete', id='_id_') }}".replace("_id_", data.id);
                        return_data = return_data + `<a href="${delete_url}" title="Delete"><i class="fa-solid fa-trash"></i></a>`
                    {% endif %}

                {% endif %}

                return return_data;
            } else {
                return "";
            }

        };

        let _columns = [];
        _header.each((index, item) => {
            let _name = $(item).data("name");
            if (_name) {
                let _render = $(item).data("render");
                if (_render) {
                  _columns.push({
                      data: null, render: eval(_render)
                   });
                } else {
                  _columns.push({
                      data: _name
                   });
                }
            } else {

            }
        });

        {% if "readonly" not in custom_fields %}
            _columns.push({
                data: null, className: "actions", render: _action_column
            });
        {% endif %}

        let _settings = {
            data: _data,
            deferRender: true,
            paging: true,
            dom: 'Bfrtip',
            buttons: ['copyHtml5', 'excelHtml5', 'csvHtml5', 'pdfHtml5'],
            columns: _columns,
            createdRow: (row, data, index) => {
              $(row).attr("data-id", data.id);
              $(row).attr("title", data.id);
            },
            preDrawCallback: () => {
              $('#users_table tbody tr.new').css("filter", "blur(1px)");
            },
            language: {
              "processing": "Loading..."
            },
            drawCallback: () => {
              setTimeout(() => {
                $('#users_table tbody tr.new').removeClass("new");
              }, 600);
            }
        };

        _table = $("#{{ id }}").DataTable(Object.assign(_settings, {{ settings|tojson }}));
    });
</script>
{% endmacro %}